* Task ifgi path tracer 2012-2-7(Tue)

** top5

** 2012-1-9(Mon)
*** DONE MaterialFactory, Dictionary, complete DiffuseMaterial, EnvironmentMaterial
lookup material in the SceneDB
** 2012-1-18(Wed)
*** DONE push the TriMesh to C++ code. add camera resolution, Fix the example renderer.
** 2012-1-19(Wed)
*** DONE Separate python -> cpp translator and rendering core library, added ImageFilm.
** 2012-2-9(Thu)
** DONE Added gfi save.
** DONE tmk ckeck (run_unittest.tmk)

** TODO TriMesh, Triangle intersection

** TODO cpp implementation
*** api/ifgi_cpp_render.cpp::compute_color
*** Sampler, Sampler's unit test
*** render_frame, render_single_frame, save_frame
*** IfgiCppRender::render_single_frame()
*** Stop using Float32, but Scalar typedef for later double possibility.

** TODO Install
*** Eclipse (on new machine)
*** Local PySide documentation.
*** Local Python documentation

** TODO save filename should be a parameter
** TODO lookup light source
   find emitting light
   select one of the emit light randomly
   look the center of the light source
   check the shadow exists
** TODO max path length 10 case
** TODO writing a C++ version

** TODO export the scene (each scene element has export_to_stream(stream))
** TODO set random seed
** TODO tracer
*** for each pixel, compute path
*** accumurate the path
** TODO BUG
*** When chenge the scenegraph dialog, no update GL runs.
*** Open Cornel Box, show scene graph, open config of light material node
** TODO tracer. show in the viewer (GLImageFilmNode)
** TODO Unified the test in one directory.

** TODO implement material
*** TODO append obj file function.
    append under mesh group with material node + trimesh node
*** TODO define material class

** TODO Add camera information in scene file (def camera)
** TODO scene exporter
** TODO Copy/Paste camera parameter
** TODO Append scene: load additional ifgi, obj file.

** TODO GLTriMeshNode
*** TODO vertex array mode
*** TODO config dialog, config_set/get

** TODO Test Gouroud shading with a mesh that has vertex normal

** TODO Implement texture class
*** TextureIF
*** ImageTexture

** TODO Add primitive to get_bsdf

** TODO material の項を読んで bsdf をどう評価するか見る．しかし最初は
   lambertian のみ．

** TODO bsdf->material

** TODO Example: test_ifgi_render.py How to render a scene

*** render a scene
*** add a lambert material
**** lookup light group
*** create a scene update to load an obj file
*** remove one object and render it
*** depth buffer

** TODO Add test: use Camera, ray triangle intersection.
** TODO Implement update button (scenegraph camera)

** TODO fix camera
*** TODO focul length is not correct
*** TODO add lens to screen, lens to film distance
*** TODO don't care lens to screen for now
*** TODO z near and far should be adjusted by viewall

** TODO test triangle ray intersection with perspective camera

*** it may be faster if I use linear system solver to find the
    ray-intersection solution.
    numpy.linalg.det(b), but compute determinant twice is expensive.
    numpy.linalg.solve(a,b)

*** Fix the viewport
*** ImageFilm as Primitive (draw()able in the screen)
**** resizable.
**** when set to the camera, resize.

** Add ImageFilm Node (choose buffer and draw)
   attach framebuffer node to camera node
   framebffers are shared between IFGICamera and GLCamera
*** RGBA frame buffer (32bit)
*** Z buffer          (32bit)

** Add GLImageFilmNode
** drawa()ble node in the screen.

** Shoot rays
*** Intersection routine with a triangle and its test.

** Add some QtWidgetIO
*** GLNode has the configuration script to set up the config.

** Picking

** GLNode
   Scene の要素を参照して draw する (update は v0 では考えない)

--
Code guideline

- method name
  foo_bar_baz()

---

** TODO Later
*** OpenMeshPrimitive, GLOpenMeshViewNode
*** Integration: WebGL in the chrome, Sketchup, Blender
*** Car configuration example
*** Marcov Chain Monte Carlo texture synthesis
