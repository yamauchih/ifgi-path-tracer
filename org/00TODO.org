* Task ifgi path tracer 2011-9-9(Fri)

** top5
*** DONE implemented ifgi parser: material def and geometry def
*** DONE load ifgi scene file and construct ifgi scenegraph
*** DONE implemented converter from ifgi scene graph to GL scenegraph
*** DONE GLMaterialNode referes ifgi material
*** DONE Implemented FG color
*** DONE Fixed Bug
**** DONE scenegraph node contect menu is not updated.
     SceneGraph node context menu should be reconstructed for each
     node. The cache mechanism doesn't make sense, therefore, removed.
     (Only the selected node is exactly the same, we can reuse it.)

** TODO tracer. show constant color
   SceneUtil.py
   set trimesh(material index from the name)
   lookup the material

** TODO tracer. show depth buffer
** TODO tracer. show in the viewer (GLImageFilmNode)
** TODO Unified the test in one directory.


** TODO implement material
*** TODO append obj file function.
    append under mesh group with material node + trimesh node
*** TODO define material class

** TODO Add camera information in scene file (def camera)
** TODO scene exporter
** TODO Copy/Paste camera parameter
** TODO Append scene: load additional ifgi, obj file.

** TODO GLTriMeshNode
*** TODO vertex array mode
*** TODO config dialog, config_set/get

** TODO Test Gouroud shading with a mesh that has vertex normal

** TODO Implement texture class
*** TextureIF
*** ImageTexture



** TODO Add primitive to get_bsdf

** TODO material の項を読んで bsdf をどう評価するか見る．しかし最初は
   lambertian のみ．

** TODO bsdf->material

** TODO Example: test_ifgi_render.py How to render a scene

*** render a scene
*** add a lambert material
**** lookup light group
*** create a scene update to load an obj file
*** remove one object and render it
*** depth buffer

** TODO Add test: use Camera, ray triangle intersection.
** TODO Implement update button (scenegraph camera)

** TODO fix camera
*** TODO focul length is not correct
*** TODO add lens to screen, lens to film distance
*** TODO don't care lens to screen for now
*** TODO z near and far should be adjusted by viewall

** TODO test triangle ray intersection with perspective camera

*** it may be faster if I use linear system solver to find the
    ray-intersection solution.
    numpy.linalg.det(b), but compute determinant twice is expensive.
    numpy.linalg.solve(a,b)

*** Fix the viewport

*** ImageFilm as Primitive (draw()able in the screen)
**** resizable.
**** when set to the camera, resize.

** Add ImageFilm Node (choose buffer and draw)
   attach framebuffer node to camera node
   framebffers are shared between IFGICamera and GLCamera
*** RGBA frame buffer (32bit)
*** Z buffer          (32bit)

** Add GLImageFilmNode

** drawa()ble node in the screen.


** Shoot rays
*** Intersection routine with a triangle and its test.

** Add some QtWidgetIO
*** Color button
*** GLNode has the configuration script to set up the config.

** Picking

** Menu Render -- Render GL
*** Render IFGI

** Scene
*** Primitive
*** 一つしか object を持てない

** Camera: lookat を入れる．view direction は normalized

** ObjLoader
   Scene に object を入れる

** OffLoader

** GLNode
   Scene の要素を参照して draw する (update は v0 では考えない)

--
Code guideline

- method name
  foo_bar_baz()

---

** TODO Later
*** OpenMeshPrimitive, GLOpenMeshViewNode
*** Integration: WebGL in the chrome, Sketchup, Blender
*** Car configuration example
*** Marcov Chain Monte Carlo texture synthesis
