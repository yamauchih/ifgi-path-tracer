# -*-Mode: tcl -*-
# ============================================================
# python.boost tmk module
# Copyright (C) 2010-2011 Yamauchi Hitoshi
# Sunday Researcher
# ============================================================

#
# assumed given strings
#
# python module name
#      MOD_CPP_SOURCE_BASE
#      ex.  ifgi_cpp_render_mod
# linking project basename list
#      PROJLIB_BASE_LIST
#      ex. { base scene }

#
# python module.so clean
#
target python_boost_clean ALWAYS_BUILD {
    set deletefilelist [glob -nocomplain *~]
    append deletefilelist " ${MOD_CPP_SOURCE_BASE}.so"
    puts -nonewline "file delete -- "
    foreach f ${deletefilelist} {
	file delete -force -- ${f}
	puts -nonewline "${f} "
    }
    puts ""
}
depend clean python_boost_clean


#----------------------------------------------------------------------
# write a file
proc write_file { data filename } {
    # open a file with "w"
    set fileId [open ${filename} "w"]
    puts -nonewline ${fileId} ${data}
    # close
    close ${fileId}
}

#----------------------------------------------------------------------
set PYTHON_INCPATH [exec python-config --include]

append cxx::FLAGS " -I ${PYTHON_INCPATH} -DPIC -shared -fexceptions -pthread"
append link::FLAGS " -DPIC -fPIC"

set COMPILE_OBJ_DIR [arch_name ${CODELEVEL}]

set PROJLIB_LIST {}
foreach bname $PROJLIB_BASE_LIST {
    set PROJLIB {}

    # TODO: this assumes all the project subdir is the same level and
    # under cpp/
    #
    # The right way is $PROJROOT + / + splitprojectbase1 + / splitprojectbase2
    # ...
    append PROJLIB "../" ${bname} "/" ${COMPILE_OBJ_DIR} "/libcpp_" ${bname} ".so"
    lappend PROJLIB_LIST $PROJLIB
    # puts $PROJLIB
    # puts $PROJLIB_LIST
}

set MOD_OBJ_FILE "$COMPILE_OBJ_DIR/${MOD_CPP_SOURCE_BASE}.o"
set COMP_COM "g++ -DPIC -shared -fPIC -o ${MOD_CPP_SOURCE_BASE}.so ${MOD_OBJ_FILE} ${PROJLIB_LIST} -lboost_python"

# puts ${python.boost::COMP_COM}
set BUILD_SH "build_mod.sh"
write_file ${COMP_COM} ${BUILD_SH}
puts "Created ${BUILD_SH}, please run it to build the python module."
# eval exec ${python.boost::COMP_COM}
